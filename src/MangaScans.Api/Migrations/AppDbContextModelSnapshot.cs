// <auto-generated />
using System;
using MangaScans.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaScans.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MangaScans.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2540),
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2542),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2543),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2543),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2544),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2556),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2557),
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2558),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2559),
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2559),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2560),
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2561),
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2562),
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2562),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2563),
                            Name = "Harem"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2564),
                            Name = "Yaoi"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2565),
                            Name = "Yuri"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 10, 2, 0, 8, 57, 995, DateTimeKind.Utc).AddTicks(2565),
                            Name = "Isekai"
                        });
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.CategoryManga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MangaId");

                    b.ToTable("CategorysMangas");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdManga")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdManga");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.ImagesChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdChapter")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdChapter");

                    b.ToTable("ImagesChapters", (string)null);
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.ImagesCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("longtext");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId")
                        .IsUnique();

                    b.ToTable("ImagesCover", (string)null);
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.Manga", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("longtext");

                    b.Property<int>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.CategoryManga", b =>
                {
                    b.HasOne("MangaScans.Domain.Entities.Category", "Category")
                        .WithMany("CategoryMangas")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaScans.Domain.Entities.Manga", "Manga")
                        .WithMany("CategoryMangas")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("MangaScans.Domain.Entities.Manga", "_Manga")
                        .WithMany("Chapters")
                        .HasForeignKey("IdManga")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("_Manga");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.ImagesChapter", b =>
                {
                    b.HasOne("MangaScans.Domain.Entities.Chapter", "_Chapter")
                        .WithMany("_Images")
                        .HasForeignKey("IdChapter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Chapter");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.ImagesCover", b =>
                {
                    b.HasOne("MangaScans.Domain.Entities.Manga", "Manga")
                        .WithOne("Cover")
                        .HasForeignKey("MangaScans.Domain.Entities.ImagesCover", "MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategoryMangas");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("_Images");
                });

            modelBuilder.Entity("MangaScans.Domain.Entities.Manga", b =>
                {
                    b.Navigation("CategoryMangas");

                    b.Navigation("Chapters");

                    b.Navigation("Cover")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
